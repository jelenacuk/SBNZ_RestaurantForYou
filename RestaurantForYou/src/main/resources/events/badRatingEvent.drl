package rules;
import com.sbnz.RestaurantForYou.model.*;
import com.sbnz.RestaurantForYou.events.*;
import java.time.LocalDate;


declare ProcessedEvent
	eventDate: String
end

rule "Rating event"
	agenda-group "rating"
	salience 100
    when
        $ratingEvent: RatingEvent($review: review );
        $average: Number() from accumulate(
            Review($rating: rating) from $review.getRestaurant().getResetaurantReviews(),
            average($rating)
        );
        not ProcessedEvent(eventDate == $ratingEvent.getExecutionTime().toString());
    then
    	modify($ratingEvent) { getReview().getRestaurant().setAverage(Double.parseDouble($average.toString())) }
		insert( new ProcessedEvent($ratingEvent.getExecutionTime().toString()) );
		
end;



rule "The restaurant rating is below 2.5 a minimum of 5 users rated it"
	agenda-group "rating"
	salience 90
    when
        $ratingEvent: RatingEvent($review: review && review.getRestaurant().getAlarm() == null 
        							&& review.getRestaurant().getAverage() <= 2.5 );
        $usersCnt: Number(intValue >= 1) from accumulate(
            Review($rating: rating) from $review.getRestaurant().getResetaurantReviews(),
            count(1)
        );
    then
    	$review.getRestaurant().setAlarm(LocalDate.now());
    	System.out.println("WARNING: The rating of the restaurant: " + $review.getRestaurant().getName()+  " is very bad => " + $review.getRestaurant().getAverage());
end;

rule "The restaurant rating increased over 2.5"
	agenda-group "rating"
	salience 90
    when
        $ratingEvent: RatingEvent($review: review && review.getRestaurant().getAlarm() != null
        							&& review.getRestaurant().getAverage() > 2.5 );
    then
    	$review.getRestaurant().setAlarm(null);
    	System.out.println("INFO: The rating of the restaurant: " + $review.getRestaurant().getName()+  " has increased => " + $review.getRestaurant().getAverage());
end;


